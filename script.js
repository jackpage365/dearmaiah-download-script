// script.js
const fs = require("fs");
const path = require("path");
const axios = require("axios");

const BASE_URL = "https://dearmaiah.com";
const API_URL = `${BASE_URL}/products.json?page=`;
const OUTPUT_DIR = path.join(__dirname, "images");

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå images ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
if (!fs.existsSync(OUTPUT_DIR)) {
  fs.mkdirSync(OUTPUT_DIR);
}

// sanitize ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
function sanitizeFileName(name) {
  return name
    .replace(/[^a-zA-Z0-9-_]/g, "-") // ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£/‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç/‡∏Ç‡∏µ‡∏î‡∏Å‡∏•‡∏≤‡∏á/‡∏Ç‡∏µ‡∏î‡∏•‡πà‡∏≤‡∏á
    .replace(/-+/g, "-") // ‡∏•‡∏î‡∏Ç‡∏µ‡∏î‡∏ã‡πâ‡∏≥ ‡πÜ ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏µ‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    .substring(0, 50); // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß ‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô
}

async function downloadImage(url, filename) {
  try {
    const res = await axios.get(url, { responseType: "arraybuffer" });
    fs.writeFileSync(filename, res.data);
    console.log("‚úÖ Saved:", filename);
  } catch (err) {
    console.error("‚ùå Failed:", url, err.message);
  }
}

async function fetchPage(page) {
  try {
    const res = await axios.get(API_URL + page);
    const data = res.data;

    if (!data.items || data.items.length === 0) {
      console.log("üìå No more items. Done!");
      return false;
    }

    for (const item of data.items) {
      if (item.photo && item.photo.normal) {
        let imgUrl = item.photo.normal;

        // ‚ùå ‡∏Ç‡πâ‡∏≤‡∏°‡∏£‡∏π‡∏õ default ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á
        if (imgUrl.includes("no_image_available.jpg")) {
          console.log("‚è≠Ô∏è Skip default image for", item.id);
          continue;
        }

        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô relative path ‚Üí ‡πÄ‡∏ï‡∏¥‡∏° BASE_URL
        if (imgUrl.startsWith("/")) {
          imgUrl = BASE_URL + imgUrl;
        }

        const safeName = sanitizeFileName(item.name || "noname");
        const filename = path.join(OUTPUT_DIR, `${item.id}-${safeName}.jpg`);
        await downloadImage(imgUrl, filename);
      }
    }

    return true;
  } catch (err) {
    console.error("Error fetching page", page, err.message);
    return false;
  }
}

async function run() {
  // ‡πÉ‡∏ä‡πâ args ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å-‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: node script.js 2 5  (‡πÇ‡∏´‡∏•‡∏î page 2 ‡∏ñ‡∏∂‡∏á 5)
  const startPage = parseInt(process.argv[2] || "1", 10);
  const endPage = parseInt(process.argv[3] || startPage, 10);

  let page = startPage;

  while (page <= endPage) {
    console.log(`\nüì• Fetching page ${page}...`);
    const hasData = await fetchPage(page);
    if (!hasData) break;
    page++;
    await new Promise((r) => setTimeout(r, 1000)); // wait 1s
  }
}

run();
